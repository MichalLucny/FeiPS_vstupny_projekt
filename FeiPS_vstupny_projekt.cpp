#include <iostream>
#include <cstdint>
#include <cstring>
#include <ctime>
#include <exception>

#define BUFFER_SIZE 400
#define HEADER_SIZE 3

using namespace std;

typedef uint8_t byte;

enum Architecture {
    k_amd64,
    k_armv7e
};

class  BinaryProcessor {
public:
    static byte GetParsedBinary (byte input_byte);
    static uint16_t CombineAndShiftTwoBytes (byte input_byte_1, byte input_byte_2);
};

class RandomNumberGenerator {
    uint16_t seed_; // a four digit number
    uint16_t Random();
public:
    RandomNumberGenerator();
    byte GenerateRandomNumber();
    void Seed();
};

Architecture CStringToArchitecture(char cstring[]);
uint16_t GenerateCrc(byte* header, int header_lenght, byte* buffer, int buffer_lenght, Architecture flag);

int main(int argc, char* argv[]) {
    Architecture k_architecture_flag;
    try {
        k_architecture_flag = CStringToArchitecture(argv[1]);
    }
    catch (invalid_argument & e) {
        cerr << "Error: " << e.what();
        exit(1);
    };

    byte* buffer;
    
    switch (k_architecture_flag) {
    case k_armv7e: buffer = (byte*) malloc(BUFFER_SIZE * 4); break;
    case k_amd64:
    default:    
        buffer = (byte*)malloc(BUFFER_SIZE * 8); break;
    }

    RandomNumberGenerator rng;

    for (int i = 0; i < BUFFER_SIZE;i++) {
        buffer[i] = rng.GenerateRandomNumber();
    }

    FILE* f;
    fopen_s(&f,"output.dat", "wb");

    
    byte header[HEADER_SIZE] = { 0xAA,0xBB,0x01 };

    for (int i = 0; i < BUFFER_SIZE;) {
        fwrite(header,sizeof(byte), sizeof(header), f);
        
        fwrite(&buffer[i], sizeof(byte), sizeof(buffer[i]), f);
        byte byte1 = BinaryProcessor::GetParsedBinary(buffer[i]);
        fwrite(&byte1, sizeof(byte), sizeof(byte1), f);
      

        fwrite(&buffer[i+1], sizeof(byte), sizeof(buffer[i+1])+sizeof(buffer[i + 2]), f);
        uint16_t byte23 = BinaryProcessor::CombineAndShiftTwoBytes(buffer[i+1], buffer[i + 2]);
        fwrite(&byte23, sizeof(uint16_t), sizeof(byte23), f);
        
        uint16_t crc = GenerateCrc(header, HEADER_SIZE, &buffer[i],3, k_architecture_flag);
        i += 3;
    }

    fclose(f);
    free(buffer);

    return(0);
}



uint16_t GenerateCrc (byte* header, int header_lenght, byte* buffer, int buffer_lenght, Architecture flag) {
    byte* msg;
    msg = (byte*) malloc((header_lenght + buffer_lenght) * sizeof(byte));
    int i;
    for (i = 0; i < header_lenght; i++) {
        msg[i] = header[i];
    }
    for (int j = 0; j < buffer_lenght; j++, i++) {
        msg[i] = buffer[j];
    }

    int dataLenght = header_lenght + buffer_lenght;

    //algoritm from Modicon Modbus Protocol Reference Guide

    static byte hByteTable[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
    };

    static byte lByteTable[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
    };

    byte crch = 0xFF; 
    byte crcl = 0xFF; 

    unsigned int uIndex;
    while (dataLenght--) 
    {
        uIndex = crch ^ *msg++;
        crch = crcl ^ hByteTable[uIndex];
        crcl = lByteTable[uIndex];
    }
 
    switch (flag) {
    case k_armv7e:
        return (crcl << 8 | crch);
    case k_amd64:
        return (crch << 8 | crcl);
    default:
        return (256);
    }
}

Architecture CStringToArchitecture(char cstring[]) {
    const int k_max_lenght = 6;
    if (strncmp(cstring, "amd64", k_max_lenght)) {
        return(k_amd64);
    }
    if (strncmp(cstring, "armv7E", k_max_lenght)) {
        return(k_armv7e);
    }
    throw (invalid_argument("Incorrect architecture selected!"));

}


byte BinaryProcessor::GetParsedBinary(byte input_byte) {
   //Brian Kernighan's algorithm
   //chosen for it's ease of understanding
    byte count; 
    for (count = 0; input_byte; count++)
    {
        input_byte &= input_byte - 1; 
    }
    return (count);
}

uint16_t BinaryProcessor::CombineAndShiftTwoBytes (byte input_byte_1, byte input_byte_2) {
    uint16_t output = ((uint16_t)input_byte_1 << 8) | input_byte_2; //combine into 16bit int
    return (output << 8); //shift
}


RandomNumberGenerator::RandomNumberGenerator() {
        Seed();
}

uint16_t RandomNumberGenerator::Random() {
        // Lehmer RNG with Sinclair ZX81 parameters; chosen because of simplicity and small numbers
        seed_ = 75 * seed_ % 65537;
        return (seed_);
}

byte RandomNumberGenerator::GenerateRandomNumber() {
    return(Random() % UINT8_MAX); //UINT8_MAX is maxof(byte) in other words 
 }

void RandomNumberGenerator::Seed() {
        seed_ = (uint16_t)(time(nullptr) % (10000 + 1000)) - 1000;  //reminder that seed_ is a four digit number
}


